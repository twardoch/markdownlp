#!/usr/bin/env node

var unified = require('unified')
var stream = require('unified-stream')
var markdown = require('remark-parse')
var frontmatter = require('remark-frontmatter')
var unherit = require('unherit')
var xtend = require('xtend')
var removePosition = require('unist-util-remove-position')
var parseFrontmatter = require('remark-parse-yaml')
var extract = require('remark-extract-frontmatter')
var yaml = require('yaml').parse
var meta = require('remark-meta')
var yamlConfig = require('remark-yaml-config')
var deflist = require('remark-deflist')



function Compiler(tree, file) {
    this.inLink = false
    this.inTable = false
    this.tree = tree
    this.file = file
    this.options = xtend(this.options)
}

var proto = Compiler.prototype

function json_compile() {
    var node
    node = this.tree
    removePosition(node, true)
    return JSON.stringify(node)
}

proto.compile = json_compile

json_stringify.Compiler = Compiler

function json_stringify(options) {
    var Local = unherit(Compiler)
    Local.prototype.options = xtend(
        Local.prototype.options,
        this.data('settings'),
        options
    )
    this.Compiler = Local
}

var processor = unified()
    .use(markdown, {
        commonmark: true
    })
    .use(frontmatter, ['yaml'])
    .use(deflist)
    //.use(extract, { yaml: yaml })
    //.use(meta)
    .use(parseFrontmatter)
    .use(yamlConfig)
    .use(json_stringify)

process.stdin.pipe(stream(processor)).pipe(process.stdout)